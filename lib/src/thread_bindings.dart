// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'package:objective_c/objective_c.dart' as objc;
import 'dart:ffi' as ffi;

late final _class_NSObject = objc.getClass("NSObject");
late final _sel_version = objc.registerName("version");
final _objc_msgSend_1hz7y9r = objc.msgSendPointer
    .cast<
      ffi.NativeFunction<
        ffi.Long Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
        )
      >
    >()
    .asFunction<
      int Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)
    >();
late final _sel_setVersion_ = objc.registerName("setVersion:");
final _objc_msgSend_4sp4xj = objc.msgSendPointer
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Long,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        int,
      )
    >();
late final _sel_classForCoder = objc.registerName("classForCoder");
final _objc_msgSend_151sglz = objc.msgSendPointer
    .cast<
      ffi.NativeFunction<
        ffi.Pointer<objc.ObjCObject> Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
        )
      >
    >()
    .asFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >();
late final _sel_replacementObjectForCoder_ = objc.registerName(
  "replacementObjectForCoder:",
);
final _objc_msgSend_1sotr3r = objc.msgSendPointer
    .cast<
      ffi.NativeFunction<
        ffi.Pointer<objc.ObjCObject> Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >
    >()
    .asFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >();
late final _sel_awakeAfterUsingCoder_ = objc.registerName(
  "awakeAfterUsingCoder:",
);

/// NSCoderMethods
extension NSCoderMethods on objc.NSObject {
  /// version
  static int version() {
    objc.checkOsVersionInternal(
      'NSObject.version',
      iOS: (false, (2, 0, 0)),
      macOS: (false, (10, 0, 0)),
    );
    return _objc_msgSend_1hz7y9r(_class_NSObject, _sel_version);
  }

  /// setVersion:
  static void setVersion(int aVersion) {
    objc.checkOsVersionInternal(
      'NSObject.setVersion:',
      iOS: (false, (2, 0, 0)),
      macOS: (false, (10, 0, 0)),
    );
    _objc_msgSend_4sp4xj(_class_NSObject, _sel_setVersion_, aVersion);
  }

  /// classForCoder
  objc.ObjCObjectBase get classForCoder {
    objc.checkOsVersionInternal(
      'NSObject.classForCoder',
      iOS: (false, (2, 0, 0)),
      macOS: (false, (10, 0, 0)),
    );
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_classForCoder);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// replacementObjectForCoder:
  objc.ObjCObjectBase? replacementObjectForCoder(objc.NSCoder coder) {
    objc.checkOsVersionInternal(
      'NSObject.replacementObjectForCoder:',
      iOS: (false, (2, 0, 0)),
      macOS: (false, (10, 0, 0)),
    );
    final _ret = _objc_msgSend_1sotr3r(
      this.ref.pointer,
      _sel_replacementObjectForCoder_,
      coder.ref.pointer,
    );
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// awakeAfterUsingCoder:
  objc.ObjCObjectBase? awakeAfterUsingCoder(objc.NSCoder coder) {
    objc.checkOsVersionInternal(
      'NSObject.awakeAfterUsingCoder:',
      iOS: (false, (2, 0, 0)),
      macOS: (false, (10, 0, 0)),
    );
    final _ret = _objc_msgSend_1sotr3r(
      this.ref.retainAndReturnPointer(),
      _sel_awakeAfterUsingCoder_,
      coder.ref.pointer,
    );
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: false, release: true);
  }
}

late final _sel_poseAsClass_ = objc.registerName("poseAsClass:");
final _objc_msgSend_xtuoz7 = objc.msgSendPointer
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >();

/// NSDeprecatedMethods
extension NSDeprecatedMethods on objc.NSObject {
  /// poseAsClass:
  static void poseAsClass(objc.ObjCObjectBase aClass) {
    objc.checkOsVersionInternal(
      'NSObject.poseAsClass:',
      iOS: (false, (2, 0, 0)),
      macOS: (false, (10, 0, 0)),
    );
    _objc_msgSend_xtuoz7(
      _class_NSObject,
      _sel_poseAsClass_,
      aClass.ref.pointer,
    );
  }
}

late final _sel_autoContentAccessingProxy = objc.registerName(
  "autoContentAccessingProxy",
);

/// NSDiscardableContentProxy
extension NSDiscardableContentProxy on objc.NSObject {
  /// autoContentAccessingProxy
  objc.ObjCObjectBase get autoContentAccessingProxy {
    objc.checkOsVersionInternal(
      'NSObject.autoContentAccessingProxy',
      iOS: (false, (4, 0, 0)),
      macOS: (false, (10, 6, 0)),
    );
    final _ret = _objc_msgSend_151sglz(
      this.ref.pointer,
      _sel_autoContentAccessingProxy,
    );
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }
}

late final _class_NSThread = objc.getClass("NSThread");
late final _sel_isKindOfClass_ = objc.registerName("isKindOfClass:");
final _objc_msgSend_19nvye5 = objc.msgSendPointer
    .cast<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >
    >()
    .asFunction<
      bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >();
late final _sel_currentThread = objc.registerName("currentThread");
late final _sel_threadPriority = objc.registerName("threadPriority");
final _objc_msgSend_1ukqyt8 = objc.msgSendPointer
    .cast<
      ffi.NativeFunction<
        ffi.Double Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
        )
      >
    >()
    .asFunction<
      double Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >();
final _objc_msgSend_1ukqyt8Fpret = objc.msgSendFpretPointer
    .cast<
      ffi.NativeFunction<
        ffi.Double Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
        )
      >
    >()
    .asFunction<
      double Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >();

/// NSThread
class NSThread extends objc.NSObject {
  NSThread._(
    ffi.Pointer<objc.ObjCObject> pointer, {
    bool retain = false,
    bool release = false,
  }) : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSThread] that points to the same underlying object as [other].
  NSThread.castFrom(objc.ObjCObjectBase other)
    : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSThread] that wraps the given raw object pointer.
  NSThread.castFromPointer(
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSThread].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_19nvye5(
      obj.ref.pointer,
      _sel_isKindOfClass_,
      _class_NSThread,
    );
  }

  /// currentThread
  static NSThread getCurrentThread() {
    final _ret = _objc_msgSend_151sglz(_class_NSThread, _sel_currentThread);
    return NSThread.castFromPointer(_ret, retain: true, release: true);
  }

  /// threadPriority
  static double threadPriority() {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(_class_NSThread, _sel_threadPriority)
        : _objc_msgSend_1ukqyt8(_class_NSThread, _sel_threadPriority);
  }

  /// threadPriority
  double get threadPriority$1 {
    objc.checkOsVersionInternal(
      'NSThread.threadPriority',
      iOS: (false, (4, 0, 0)),
      macOS: (false, (10, 6, 0)),
    );
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_threadPriority)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_threadPriority);
  }
}

late final _sel_performSelectorOnMainThread_withObject_waitUntilDone_modes_ =
    objc.registerName(
      "performSelectorOnMainThread:withObject:waitUntilDone:modes:",
    );
final _objc_msgSend_1fdou4m = objc.msgSendPointer
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Bool,
          ffi.Pointer<objc.ObjCObject>,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        bool,
        ffi.Pointer<objc.ObjCObject>,
      )
    >();
late final _sel_performSelectorOnMainThread_withObject_waitUntilDone_ = objc
    .registerName("performSelectorOnMainThread:withObject:waitUntilDone:");
final _objc_msgSend_tsocn4 = objc.msgSendPointer
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Bool,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        bool,
      )
    >();
late final _sel_performSelector_onThread_withObject_waitUntilDone_modes_ = objc
    .registerName("performSelector:onThread:withObject:waitUntilDone:modes:");
final _objc_msgSend_1cc1buo = objc.msgSendPointer
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Bool,
          ffi.Pointer<objc.ObjCObject>,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        bool,
        ffi.Pointer<objc.ObjCObject>,
      )
    >();
late final _sel_performSelector_onThread_withObject_waitUntilDone_ = objc
    .registerName("performSelector:onThread:withObject:waitUntilDone:");
final _objc_msgSend_1whyima = objc.msgSendPointer
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Bool,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        bool,
      )
    >();
late final _sel_performSelectorInBackground_withObject_ = objc.registerName(
  "performSelectorInBackground:withObject:",
);
final _objc_msgSend_1qv0eq4 = objc.msgSendPointer
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >();

/// NSThreadPerformAdditions
extension NSThreadPerformAdditions on objc.NSObject {
  /// performSelectorOnMainThread:withObject:waitUntilDone:modes:
  void performSelectorOnMainThread(
    ffi.Pointer<objc.ObjCSelector> aSelector, {
    objc.ObjCObjectBase? withObject,
    required bool waitUntilDone,
    objc.NSArray? modes,
  }) {
    objc.checkOsVersionInternal(
      'NSObject.performSelectorOnMainThread:withObject:waitUntilDone:modes:',
      iOS: (false, (2, 0, 0)),
      macOS: (false, (10, 0, 0)),
    );
    _objc_msgSend_1fdou4m(
      this.ref.pointer,
      _sel_performSelectorOnMainThread_withObject_waitUntilDone_modes_,
      aSelector,
      withObject?.ref.pointer ?? ffi.nullptr,
      waitUntilDone,
      modes?.ref.pointer ?? ffi.nullptr,
    );
  }

  /// performSelectorOnMainThread:withObject:waitUntilDone:
  void performSelectorOnMainThread$1(
    ffi.Pointer<objc.ObjCSelector> aSelector, {
    objc.ObjCObjectBase? withObject,
    required bool waitUntilDone,
  }) {
    objc.checkOsVersionInternal(
      'NSObject.performSelectorOnMainThread:withObject:waitUntilDone:',
      iOS: (false, (2, 0, 0)),
      macOS: (false, (10, 0, 0)),
    );
    _objc_msgSend_tsocn4(
      this.ref.pointer,
      _sel_performSelectorOnMainThread_withObject_waitUntilDone_,
      aSelector,
      withObject?.ref.pointer ?? ffi.nullptr,
      waitUntilDone,
    );
  }

  /// performSelector:onThread:withObject:waitUntilDone:modes:
  void performSelector(
    ffi.Pointer<objc.ObjCSelector> aSelector, {
    required NSThread onThread,
    objc.ObjCObjectBase? withObject,
    required bool waitUntilDone,
    objc.NSArray? modes,
  }) {
    objc.checkOsVersionInternal(
      'NSObject.performSelector:onThread:withObject:waitUntilDone:modes:',
      iOS: (false, (2, 0, 0)),
      macOS: (false, (10, 5, 0)),
    );
    _objc_msgSend_1cc1buo(
      this.ref.pointer,
      _sel_performSelector_onThread_withObject_waitUntilDone_modes_,
      aSelector,
      onThread.ref.pointer,
      withObject?.ref.pointer ?? ffi.nullptr,
      waitUntilDone,
      modes?.ref.pointer ?? ffi.nullptr,
    );
  }

  /// performSelector:onThread:withObject:waitUntilDone:
  void performSelector$1(
    ffi.Pointer<objc.ObjCSelector> aSelector, {
    required NSThread onThread,
    objc.ObjCObjectBase? withObject,
    required bool waitUntilDone,
  }) {
    objc.checkOsVersionInternal(
      'NSObject.performSelector:onThread:withObject:waitUntilDone:',
      iOS: (false, (2, 0, 0)),
      macOS: (false, (10, 5, 0)),
    );
    _objc_msgSend_1whyima(
      this.ref.pointer,
      _sel_performSelector_onThread_withObject_waitUntilDone_,
      aSelector,
      onThread.ref.pointer,
      withObject?.ref.pointer ?? ffi.nullptr,
      waitUntilDone,
    );
  }

  /// performSelectorInBackground:withObject:
  void performSelectorInBackground(
    ffi.Pointer<objc.ObjCSelector> aSelector, {
    objc.ObjCObjectBase? withObject,
  }) {
    objc.checkOsVersionInternal(
      'NSObject.performSelectorInBackground:withObject:',
      iOS: (false, (2, 0, 0)),
      macOS: (false, (10, 5, 0)),
    );
    _objc_msgSend_1qv0eq4(
      this.ref.pointer,
      _sel_performSelectorInBackground_withObject_,
      aSelector,
      withObject?.ref.pointer ?? ffi.nullptr,
    );
  }
}
